name: Security Scan\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  schedule:\n    - cron: '0 0 * * 1'  # Run weekly on Monday at midnight\n  workflow_dispatch:     # Allow manual trigger\n\njobs:\n  dependency-check:\n    name: Dependency Security Check\n    runs-on: ubuntu-latest\n    \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n      \n    - name: Set up Node.js\n      uses: actions/setup-node@v4\n      with:\n        node-version: 18\n        cache: 'npm'\n      \n    - name: Install dependencies\n      run: npm ci\n      \n    - name: Run npm audit\n      run: npm audit --production --audit-level=high\n      \n    - name: Run Snyk to check for vulnerabilities\n      uses: snyk/actions/node@master\n      continue-on-error: true  # Don't fail the build, just report issues\n      env:\n        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n      with:\n        args: --severity-threshold=high\n\n  code-security-analysis:\n    name: Code Security Analysis\n    runs-on: ubuntu-latest\n    \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n      \n    - name: Set up Node.js\n      uses: actions/setup-node@v4\n      with:\n        node-version: 18\n        cache: 'npm'\n      \n    - name: Install dependencies\n      run: npm ci\n      \n    - name: Run ESLint security rules\n      run: |\n        npm install --save-dev eslint-plugin-security\n        echo 'module.exports = {\n          plugins: ["security"],\n          extends: ["plugin:security/recommended"]\n        };' > .eslintrc.security.js\n        npx eslint --config .eslintrc.security.js --ignore-pattern \"node_modules/\" --ignore-pattern \"dist/\" --ignore-pattern \"coverage/\" --no-eslintrc src/\n      continue-on-error: true  # Don't fail the build, just report issues\n      \n    - name: Run security unit tests\n      run: npm test -- --testPathPattern=\"security\"\n\n  zap-scan:\n    name: OWASP ZAP API Scan\n    runs-on: ubuntu-latest\n    needs: [dependency-check, code-security-analysis]\n    \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n      \n    - name: Set up Node.js\n      uses: actions/setup-node@v4\n      with:\n        node-version: 18\n        cache: 'npm'\n      \n    - name: Install dependencies\n      run: npm ci\n      \n    - name: Build\n      run: npm run build\n      \n    - name: Create .env file\n      run: |\n        cat > .env << EOF\n        PORT=3002\n        SERVER_NAME=\"MCP Test Server\"\n        SERVER_VERSION=\"1.0.0-test\"\n        NODE_ENV=test\n        DEBUG=false\n        ENABLE_RATE_LIMITING=false\n        JWT_SECRET=test-secret\n        JWT_EXPIRES_IN=3600\n        JWT_REFRESH_SECRET=test-refresh-secret\n        JWT_REFRESH_EXPIRES_IN=604800\n        CORS_ORIGINS=*\n        EOF\n      \n    - name: Start server in background\n      run: |\n        npm start &\n        echo \"Waiting for server to start...\"\n        sleep 10  # Wait for server to initialize\n        curl -s http://localhost:3000/health || (echo \"Server failed to start\" && exit 1)\n      \n    - name: ZAP Scan\n      uses: zaproxy/action-baseline@v0.9.0\n      with:\n        target: 'http://localhost:3000'\n        rules_file_name: '.zap/rules.tsv'\n        cmd_options: '-a'\n        \n    - name: Stop server\n      if: always()  # Always run this step, even if previous steps fail\n      run: |\n        server_pid=$(pgrep -f \"node dist/index.js\")\n        if [ -n \"$server_pid\" ]; then\n          kill $server_pid\n          echo \"Server with PID $server_pid stopped\"\n        fi\n\n  security-report:\n    name: Generate Security Report\n    runs-on: ubuntu-latest\n    needs: [dependency-check, code-security-analysis, zap-scan]\n    if: success() || failure()  # Run even if other jobs fail\n    \n    steps:\n    - name: Create Security Report\n      run: |\n        echo \"# Security Scan Report\" > security-report.md\n        echo \"## Generated on $(date)\" >> security-report.md\n        echo \"\" >> security-report.md\n        echo \"### Test Results\" >> security-report.md\n        echo \"- Dependency Check: ${{ needs.dependency-check.result }}\" >> security-report.md\n        echo \"- Code Security Analysis: ${{ needs.code-security-analysis.result }}\" >> security-report.md\n        echo \"- ZAP Scan: ${{ needs.zap-scan.result }}\" >> security-report.md\n        echo \"\" >> security-report.md\n        echo \"See workflow run for detailed results.\" >> security-report.md\n      \n    - name: Upload security report\n      uses: actions/upload-artifact@v4\n      with:\n        name: security-report\n        path: security-report.md\n        \n    - name: Create issue if tests fail\n      if: failure()\n      uses: actions/github-script@v7\n      with:\n        github-token: ${{ secrets.GITHUB_TOKEN }}\n        script: |\n          github.rest.issues.create({\n            owner: context.repo.owner,\n            repo: context.repo.repo,\n            title: `ðŸš¨ Security Scan Failed - ${new Date().toISOString().split('T')[0]}`,\n            body: `Security scan failed in run ${context.runId}.\n            \n            [View run details](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})\n            \n            Please investigate the security issues immediately.`,\n            labels: ['security', 'high-priority']\n          })\n