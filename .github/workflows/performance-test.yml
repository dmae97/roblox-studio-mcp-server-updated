name: Performance Tests\n\non:\n  schedule:\n    - cron: '0 0 * * 0'  # Run weekly on Sunday at midnight\n  workflow_dispatch:     # Allow manual trigger\n\njobs:\n  performance-test:\n    runs-on: ubuntu-latest\n    \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n      \n    - name: Set up Node.js\n      uses: actions/setup-node@v4\n      with:\n        node-version: 18\n        cache: 'npm'\n        \n    - name: Install dependencies\n      run: npm ci\n      \n    - name: Build\n      run: npm run build\n      \n    - name: Create .env file\n      run: |\n        cat > .env << EOF\n        PORT=3001\n        SERVER_NAME=\"MCP Test Server\"\n        SERVER_VERSION=\"1.0.0-test\"\n        NODE_ENV=test\n        DEBUG=false\n        ENABLE_RATE_LIMITING=false\n        JWT_SECRET=test-secret\n        JWT_EXPIRES_IN=3600\n        JWT_REFRESH_SECRET=test-refresh-secret\n        JWT_REFRESH_EXPIRES_IN=604800\n        CORS_ORIGINS=*\n        EOF\n      \n    - name: Start server in background\n      run: |\n        npm start &\n        echo \"Waiting for server to start...\"\n        sleep 10  # Wait for server to initialize\n        curl -s http://localhost:3000/health || (echo \"Server failed to start\" && exit 1)\n      \n    - name: Install k6\n      run: |\n        curl -L https://github.com/grafana/k6/releases/download/v0.42.0/k6-v0.42.0-linux-amd64.tar.gz | tar xz\n        sudo cp k6-v0.42.0-linux-amd64/k6 /usr/local/bin\n      \n    - name: Run HTTP API load test\n      run: k6 run performance/k6-load-test.js --summary-export=k6-api-summary.json\n      \n    - name: Run WebSocket load test\n      run: k6 run performance/socket-test.js --summary-export=k6-ws-summary.json\n      \n    - name: Generate performance report\n      run: |\n        echo \"# Performance Test Results\" > performance-report.md\n        echo \"## Test Date: $(date)\" >> performance-report.md\n        echo \"\" >> performance-report.md\n        \n        echo \"### HTTP API Load Test Results\" >> performance-report.md\n        echo '```' >> performance-report.md\n        cat k6-api-summary.json >> performance-report.md\n        echo '```' >> performance-report.md\n        echo \"\" >> performance-report.md\n        \n        echo \"### WebSocket Load Test Results\" >> performance-report.md\n        echo '```' >> performance-report.md\n        cat k6-ws-summary.json >> performance-report.md\n        echo '```' >> performance-report.md\n      \n    - name: Upload test results\n      uses: actions/upload-artifact@v4\n      with:\n        name: performance-test-results\n        path: |\n          performance-report.md\n          k6-api-summary.json\n          k6-ws-summary.json\n      \n    - name: Create issue if test fails\n      if: failure()\n      uses: actions/github-script@v7\n      with:\n        github-token: ${{ secrets.GITHUB_TOKEN }}\n        script: |\n          github.rest.issues.create({\n            owner: context.repo.owner,\n            repo: context.repo.repo,\n            title: `ðŸš¨ Performance Test Failed - ${new Date().toISOString().split('T')[0]}`,\n            body: `Performance tests failed in run ${context.runId}.\n            \n            [View run details](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})\n            \n            Please investigate the performance issues.`\n          })\n      \n    - name: Stop server\n      run: |\n        server_pid=$(pgrep -f \"node dist/index.js\")\n        if [ -n \"$server_pid\" ]; then\n          kill $server_pid\n          echo \"Server with PID $server_pid stopped\"\n        fi\n