import request from 'supertest';\nimport express from 'express';\nimport http from 'http';\nimport { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';\nimport { SSEServerTransport } from '@modelcontextprotocol/sdk/server/sse.js';\nimport { robloxTools } from '../tools/index.js';\nimport { robloxResources } from '../resources/index.js';\nimport { robloxPrompts } from '../prompts/index.js';\nimport { errorHandler, notFound } from '../middleware/errorHandler.js';\nimport { metricsMiddleware } from '../middleware/metrics.js';\n\ndescribe('E2E Server Tests', () => {\n  let app: express.Application;\n  let server: http.Server;\n  \n  beforeAll(() => {\n    // Create MCP Server\n    const mcpServer = new McpServer({\n      name: 'E2E Test Server',\n      version: '1.0.0-test',\n    });\n    \n    // Register tools, resources, and prompts\n    robloxTools.register(mcpServer);\n    robloxResources.register(mcpServer);\n    robloxPrompts.register(mcpServer);\n    \n    // Create Express app\n    app = express();\n    \n    // Add middleware\n    app.use(express.json());\n    app.use(metricsMiddleware);\n    \n    // Add health check endpoint\n    app.get('/health', (_, res) => {\n      res.status(200).json({ status: 'ok' });\n    });\n    \n    // Add error handling middleware\n    app.use(notFound);\n    app.use(errorHandler);\n    \n    // Create HTTP server\n    server = http.createServer(app);\n  });\n  \n  afterAll((done) => {\n    server.close(done);\n  });\n  \n  test('Health endpoint should return 200 status', async () => {\n    const response = await request(app).get('/health');\n    expect(response.status).toBe(200);\n    expect(response.body).toHaveProperty('status', 'ok');\n  });\n  \n  test('Non-existent endpoint should return 404 status', async () => {\n    const response = await request(app).get('/non-existent-path');\n    expect(response.status).toBe(404);\n  });\n});\n